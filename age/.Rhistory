for (j in seq(0.1,3,by=0.1)) {
alpha <- 0.01
A.new <- rbeta(n,0.1,2)
B.new <- rbeta(n,j,2)
dif.ps <- append(dif.ps,
sum(p.adjust(c(A.new,B.new), method='fdr')<alpha)-
sum(p.adjust(A.new,method='fdr')<alpha))
dif.means <- append(dif.means, mean(B.new)-mean(A.new))
}
plot(dif.means, dif.ps,type='l',
xlab='Difference in Mean P-value',
ylab='Difference in Significant P-vals',
ylim=c(-1000,4000))
abline(h=0)
text(x=0.3,y=700,'More Sig. Disc.')
text(x=0.3,y=-700,'Less Sig. Disc.')
dif.ps <- c()
dif.means <- c()
for (j in seq(0.1,3,by=0.1)) {
alpha <- 0.0001
A.new <- rbeta(n,0.1,2)
B.new <- rbeta(n,j,2)
dif.ps <- append(dif.ps,
sum(p.adjust(c(A.new,B.new), method='fdr')<alpha)-
sum(p.adjust(A.new,method='fdr')<alpha))
dif.means <- append(dif.means, mean(B.new)-mean(A.new))
}
plot(dif.means, dif.ps,type='l',
xlab='Difference in Mean P-value',
ylab='Difference in Significant P-vals',
ylim=c(-1000,4000))
abline(h=0)
text(x=0.3,y=700,'More Sig. Disc.')
text(x=0.3,y=-700,'Less Sig. Disc.')
sqrt(32)
?dt
dt(10000,1)
dq(0.5,1)
qt(0.5,1)
qt(0.5,2)
dt(0.5,1)
dt(0.5,2)
dt(0.5,3)
dt(0.5,4)
dt(0.5,5)
dt(0.5,6)
rel.eff <- function(v){
medstar <- sapply(1:5000, quantile(0.5,rt(10000,v)))
meanstar <- sapply(1:5000, mean(rt(10000,v)))
rel.eff <-mean(medstar^2)/mean(meanstar^2)
return(rel.eff)
}
rel.eff(1)
?quantile
rel.eff <- function(v){
medstar <- sapply(1:5000, quantile(rt(10000,v), 0.5))
meanstar <- sapply(1:5000, mean(rt(10000,v)))
rel.eff <-mean(medstar^2)/mean(meanstar^2)
return(rel.eff)
}
rel.eff(1)
quantile(rt(10000,v), 0.5)
rel.eff <- function(v){
medstar <- replicate(1:5000, quantile(rt(10000,v), 0.5))
meanstar <- replicate(1:5000, mean(rt(10000,v)))
rel.eff <-mean(medstar^2)/mean(meanstar^2)
return(rel.eff)
}
rel.eff(1)
rel.eff <- function(v){
medstar <- replicate(5000, quantile(rt(10000,v), 0.5))
meanstar <- replicate(5000, mean(rt(10000,v)))
rel.eff <-mean(medstar^2)/mean(meanstar^2)
return(rel.eff)
}
rel.eff(1)
rel.eff(3)
h <- function(r){
log((1+r)/(1-r))/2
}
h(-.5)
h <- function(r){
log((1+r)/(1-r))/2
}
ci <- function(r, n){
se.trans <- 1-r^2
mu.trans <- h(r)
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
}
ci <- function(r){
se.trans <- 1-r^2
mu.trans <- h(r)
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
}
ci(-0.5)
h <- function(r){
return(log((1+r)/(1-r))/2)
}
ci <- function(r){
se.trans <- 1-r^2
mu.trans <- h(r)
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci(-0.5)
ci <- function(r){
se.trans <- sqrt(1-r^2)
mu.trans <- h(r)
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci(-0.5)
h(-0.5)
r <- h(-0.5)
se.trans <- 1-r^2
se.trans
h <- function(r){
return(log((1+r)/(1-r))/2)
}
ci <- function(r){
se.trans <- 1
mu.trans <- h(r)
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci(-0.5)
h <- function(r){
return(log((1+r)/(1-r))/2)
}
ci <- function(r, n){
se.trans <- 1/sqrt(n)
mu.trans <- h(r)
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci(-0.5, 712)
ci2 <- function(r, n){
se.trans <- (1-p^2)/sqrt(n)
mu.trans <- r
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci2 <- function(r, n){
se.trans <- (1-p^2)/sqrt(n)
mu.trans <- r
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci2(-0.05)
ci2 <- function(r, n){
se.trans <- (1-r^2)/sqrt(n)
mu.trans <- r
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci2(-0.05)
ci2(-0.05, 712)
ci2 <- function(r, n){
se.trans <- (1-r^2)/sqrt(n)
mu.trans <- r
ci <- c(mu.trans-2*se.trans, mu.trans+2*se.trans)
return(ci)
}
ci2(-0.5, 712)
ci2(0.0238, 227)
ci2(-0.0669, 485)
get_mean <- function(grade){
c.sub <- subset(caffeine, Grade==grade)
idx <-sample(1:nrow(c.sub), nrow(c.sub), replace=T)
c.boot <- c.sub[idx,]
xbar <- mean(c.boot$Without-c.boot$With)
}
sample <- replicate(5000, get_mean(10))
source("http://istics.net/r/data_hw9.R")
caffeine <- data.frame(caffeine)
get_mean <- function(grade){
c.sub <- subset(caffeine, Grade==grade)
idx <-sample(1:nrow(c.sub), nrow(c.sub), replace=T)
c.boot <- c.sub[idx,]
xbar <- mean(c.boot$Without-c.boot$With)
}
sample <- replicate(5000, get_mean(10))
quantile(sample, probs=c(0.025, 0.975))
quantile(sample, probs=c(0.025, 0.975)) - 0.7
sample <- replicate(5000, get_mean(12))
quantile(sample, probs=c(0.025, 0.975))
shoes
table(shoes$mean)
table(shoes)
19.408/6.233
names(shoes)
get_mean(8)
sample[1:10]
get_mean <- function(grade){
c.sub <- subset(caffeine, Grade==grade)
idx <-sample(1:nrow(c.sub), nrow(c.sub), replace=T)
c.boot <- c.sub[idx,]
xbar <- mean(c.boot$Without-c.boot$With)
return(xbar)
}
sample <- replicate(5000, get_mean(12))
quantile(sample, probs=c(0.025, 0.975))
shoes$Shoe.number[1:10]
get_mean2 <- function(){
men <- subset(shoes, Gender=0)
women <- subset(shoes, Gender=1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(mean(men.boot$Shoe.number)/mean(women.boot$Shoe.number))
}
get_mean2()
get_mean2()
get_mean2()
get_mean2()
get_mean2()
get_mean2()
get_mean2()
get_mean2()
get_mean2()
get_mean2()
sample2 <- replicate(5000, get_mean2)
mean(sample2) - 19.408/6.233
mean(sample2)
sample2[1:10]
sample2 <- replicate(5000, get_mean2())
mean(sample2) - 19.408/6.233
mean(sample2 - 19.408/6.233)
19.408/6.233 - quantile(sample2, probs=c(0.975,0.025))
\quantile(sample2, probs=c(0.025,0.975)) - 19.408/6.233
quantile(sample2, probs=c(0.025,0.975)) - 19.408/6.233
quantile(sample2, probs=c(0.025,0.975))
get_mean2 <- function(){
men <- subset(shoes, Gender=0)
women <- subset(shoes, Gender=1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(mean(women.boot$Shoe.number)/mean(men.boot$Shoe.number))
}
sample2 <- replicate(5000, get_mean2())
mean(sample2 - 19.408/6.233)
quantile(sample2, probs=c(0.025,0.975))
plugin <- 19.408/6.233
plugin
men <- subset(shoes, Gender=0)
women <- subset(shoes, Gender=1)
head(meb)
head(men)
men <- subset(shoes, Gender(0=Male,1=Female)=0)
names(shoes) <- c("Gender", 'Shoe.size', 'Shoe.number')
head(men)
men <- subset(shoes, Gender=0)
head(men)
men <- subset(shoes, Gender==0)
head(men)
names(shoes) <- c("Gender", 'Shoe.size', 'Shoe.number')
get_mean2 <- function(){
men <- subset(shoes, Gender==0)
women <- subset(shoes, Gender==1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(mean(women.boot$Shoe.number)/mean(men.boot$Shoe.number))
}
sample2 <- replicate(5000, get_mean2())
mean(sample2 - plugin)
quantile(sample2, probs=c(0.025,0.975))
men.full <- subset(shoes, Gender==0)
women.full <- subset(shoes, Gender==1)
plugin <- median(women.full$Shoe.number)/median(men.full$Shoe.number)
plugin
get_mean3 <- function(){
men <- subset(shoes, Gender==0)
women <- subset(shoes, Gender==1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(median(women.boot$Shoe.number)/median(men.boot$Shoe.number))
}
sample3 <- replicate(5000, get_mean3())
mean(sample3 - plugin)
quantile(sample3, probs=c(0.025,0.975))
sample3[1:10]
plugin
plugin <- 19.408/6.233
plugin
get_mean2 <- function(){
men <- subset(shoes, Gender==0)
women <- subset(shoes, Gender==1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(mean(women.boot$Shoe.number)/mean(men.boot$Shoe.number))
}
sample2 <- replicate(5000, get_mean2())
mean(sample2 - plugin)
sample2 <- replicate(5000, get_mean2())
mean(sample2 - plugin)
sample2 <- replicate(5000, get_mean2())
mean(sample2 - plugin)
quantile(sample2, probs=c(0.025,0.975))
men.full <- subset(shoes, Gender==0)
women.full <- subset(shoes, Gender==1)
plugin <- median(women.full$Shoe.number)/median(men.full$Shoe.number)
plugin
men <- subset(shoes, Gender==0)
head(men)
women <- subset(shoes, Gender==1)
head(women)
plugin <- median(women.full$Shoe.number)/median(men.full$Shoe.number)
plugin
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
head(men.boot)
head(women.boot)
sample3 <- replicate(5000, get_mean3())
mean(sample3 - plugin)
quantile(sample3, probs=c(0.025,0.975))
median(sample3 - plugin)
mean(sample3) - plugin
get_mean3 <- function(){
men <- subset(shoes, Gender==0)
women <- subset(shoes, Gender==1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(median(women.boot$Shoe.number)/median(men.boot$Shoe.number))
}
sample3 <- replicate(5000, get_mean3())
mean(sample3) - plugin
quantile(sample3, probs=c(0.025,0.975))
plugin
source("http://istics.net/r/data_hw9.R")
names(shoes) <- c("Gender", 'Shoe.size', 'Shoe.number')
men.full <- subset(shoes, Gender==0)
women.full <- subset(shoes, Gender==1)
plugin <- median(women.full$Shoe.number)/median(men.full$Shoe.number)
plugin
get_mean3 <- function(){
men <- subset(shoes, Gender==0)
women <- subset(shoes, Gender==1)
men.boot <- men[sample(1:nrow(men), nrow(men), replace=T),]
women.boot <- women[sample(1:nrow(women), nrow(women), replace=T),]
return(median(women.boot$Shoe.number)/median(men.boot$Shoe.number))
}
sample3 <- replicate(5000, get_mean3())
mean(sample3) - plugin
quantile(sample3, probs=c(0.025,0.975))
mean(sample3 - plugin)
tstar <- sample3-plugin
ab <- quantile(tstar,c(0.025,0.975)) # Obtains a and b
plugin - ab[2:1] # Finds the confidence interval.
mean(tstar)
seq(1:10)
sum(1:10)
xi = 1:10
sum(xi)
5*sum(xi)
sum(5*xi)
system('fastq-dump SRR988057.sra --split-files --gzip --outdir .')
system('fastq-dump SRR988057.sra --split-files --gzip --outdir .')
system('fastq-dump SRR988057.sra --split-files --gzip --outdir .')
system('fastq-dump SRR988057.sra --split-files --gzip --outdir .')
system('export PATH=$PATH:/home/andrew/Homework/STAT_530/Lab3/sratoolkit.2.4.1-ubuntu64/bin')
system('fastq-dump SRR988057.sra --split-files --gzip --outdir .')
system('export PATH=$PATH:/home/andrew/Homework/STAT_530/HW3/sratoolkit.2.4.1-ubuntu64/bin')
system('fastq-dump SRR988057.sra --split-files --gzip --outdir .')
mu1=rep(0, length=n)
mu2 = seq(0,5, length=n)
n=1000
mu1=rep(0, length=n)
mu2 = seq(0,5, length=n)
x1 = rnorm(1, mu1, sd=1)
x1
x1 = sapply(mu1, function(x) rnorm(1, x, sd=1))
x2 = sapply(mu2, function(x) rnorm(1, x, sd=1))
plot(x2)
plot(x1)
js_est <- function(i, x){
n_js <- length(x)
return((1-(n-2)/sum(x^2))*x[i])
}
n_js(1, x1)
js_est(1, x1)
x1[1]
js_est <- function(x){
n_js <- length(x)
return((1-(n-2)/sum(x^2))*x)
}
js_est(x1)[1:10]
mse <- function(real, est){
mean((real-est)^2)
}
sim <- function(){
mu1=rep(0, length=n)
mu2 = seq(0,5, length=n)
x1 = sapply(mu1, function(x) rnorm(1, x, sd=1))
x2 = sapply(mu2, function(x) rnorm(1, x, sd=1))
mle1 <- x1
mle2 <- x2
js1 <- js_est(x1)
js2 <- js_est(x2)
return(matrix(mse(mu1,mle1),mse(mu1,js1),mse(mu2,mle2), mse(mu2,js2), byrow=T, nrow=2))
}
sim()
sim <- function(){
mu1=rep(0, length=n)
mu2 = seq(0,5, length=n)
x1 = sapply(mu1, function(x) rnorm(1, x, sd=1))
x2 = sapply(mu2, function(x) rnorm(1, x, sd=1))
mle1 <- x1
mle2 <- x2
js1 <- js_est(x1)
js2 <- js_est(x2)
return(matrix(c(mse(mu1,mle1),mse(mu1,js1),mse(mu2,mle2), mse(mu2,js2)), byrow=T, nrow=2))
}
sim()
sim()
sim()
sim()
sim()
sim()
sim()
sim()
rep(sim(),2)
sapply(1:2,sim())
sapply(1:2,sim
)
sapply(1:2,sim)
result <- matrix(0,nrow=2, ncol=2)
result
result <- matrix(0,nrow=2, ncol=2)
for (i in 1:200){
tmp <- sim()
result <- tmp+result
}
result/200
library(edgeR);
install.packages('edgeR')
sessionInfo()
install.packages('edgeR')
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
library(edgeR);
n=1000
js_est <- function(x){
n_js <- length(x)
return((1-(n-2)/sum(x^2))*x)
}
mse <- function(real, est){
mean((real-est)^2)
}
sim <- function(){
mu1=rep(0, length=n)
mu2 = seq(0,5, length=n)
x1 = sapply(mu1, function(x) rnorm(1, x, sd=1))
x2 = sapply(mu2, function(x) rnorm(1, x, sd=1))
mle1 <- x1
mle2 <- x2
js1 <- js_est(x1)
js2 <- js_est(x2)
return(matrix(c(mse(mu1,mle1),mse(mu1,js1),mse(mu2,mle2), mse(mu2,js2)), byrow=T, nrow=2))
}
result <- matrix(0,nrow=2, ncol=2)
for (i in 1:200){
tmp <- sim()
result <- tmp+result
}
result/200
x[1:10]
install.packages("Rcpp")
library(rsconnect)
rsconnect::deployApp(appName='Chicago_Age')
getwd()
setwd('chicago/age')
getwd()
library(rsconnect)
rsconnect::deployApp(appName='Chicago_Age')
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
rsconnect::deployApp(appName='Chicago_Age')
census <- read.csv('data/census.csv')
getwd()
census <- read.csv('data/census.csv')
head(census)
census$NAME[1:20]
census$NAME[1:50]
census$NAME[48:63]
census$NAME[48:150]
colnames(census)
tot <- census[census$GROUP=='Total', ]
tot$NAME[1;20]
tot$NAME[1:20]
tot$SEG[1;20]
tot$SEG[1:20]
tot$PLACE[1:20]
tot$CHARITER[1:20]
tot$COUSUB[1:20]
tot$GEOID2[1:20]
tot$TRACT[1:20]
d_32 <- tot[tot$CHGOCA == 32, ]
d_32$TRACT
d_32$GEOID2
ca_names
url <- sprintf("http://crime.chicagotribune.com/api/1.0-beta1/datesummary/?format=json&limit=0&year=2013&community_area=%d&related=1", ca_num)
r <- GET(url)
library(httr)
url <- sprintf("http://crime.chicagotribune.com/api/1.0-beta1/datesummary/?format=json&limit=0&year=2013&community_area=%d&related=1", ca_num)
url <- sprintf("http://crime.chicagotribune.com/api/1.0-beta1/datesummary/?format=json&limit=0&year=2013&community_area=%d&related=1", ca_num)
ca_num=8
url <- sprintf("http://crime.chicagotribune.com/api/1.0-beta1/datesummary/?format=json&limit=0&year=2013&community_area=%d&related=1", ca_num)
r <- GET(url)
r <- content(r, 'parsed')
r$meta$community_area$shape_area
r$meta$community_area$shape_len
